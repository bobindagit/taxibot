import json
import requests
from datetime import datetime
from datetime import timedelta
import time
from requests.auth import HTTPBasicAuth
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import KeyboardButton, ReplyKeyboardMarkup, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup


# STEP NAMES
QUESTION = 'question'
TAXI_FROM = 'from'
TAXI_FROM_LOCATION = 'from_location'
TAXI_TO = 'to'
TAXI_TO_LOCATION = 'to_location'
TAXI_TIME = 'time'
TAXI_CONTACT = 'contacts'


class TelegramBot:

    def __init__(self, database):

        # Reading file and getting settings
        with open('settings.json', 'r') as file:
            file_data = json.load(file)
            bot_token = file_data.get('bot_token_user')
            file.close()

        self.database = database
        self.user_manager = UserManager(self.database.db_user_info)
        self.orders_manager = OrdersManager(database.db_orders)

        # Main telegram UPDATER
        self.updater = Updater(token=bot_token, use_context=True)
        self.dispatcher = self.updater.dispatcher

        # Initializing Menu object
        menu = TelegramMenu(self.user_manager, self.orders_manager)

        # Initializing Handler object
        handlers = TelegramHandlers(self.user_manager, menu)

        # Handlers
        self.dispatcher.add_handler(CommandHandler('start', handlers.start))
        self.dispatcher.add_handler(CommandHandler('stop', handlers.stop))
        self.dispatcher.add_handler(MessageHandler(Filters.text, menu.menu_message))
        self.dispatcher.add_handler(MessageHandler(Filters.location, menu.location_message))
        self.dispatcher.add_handler(MessageHandler(Filters.command, handlers.unknown))
        self.dispatcher.add_handler(CallbackQueryHandler(self.orders_manager.decline_order, pattern='decline_order'))
        # Time menu handlers
        self.dispatcher.add_handler(CallbackQueryHandler(menu.time1, pattern='time1'))
        self.dispatcher.add_handler(CallbackQueryHandler(menu.time2, pattern='time2'))
        self.dispatcher.add_handler(CallbackQueryHandler(menu.time3, pattern='time3'))

        # Starting the bot
        self.updater.start_polling()

        print('Telegram bot initialized!')


class UserManager:

    def __init__(self, db_user_info):
        self.db_user_info = db_user_info

    def create_user(self, current_user: dict) -> None:
        user_info = {'user_id': current_user.id,
                     'full_name': current_user.full_name,
                     'link': current_user.link,
                     'current_step': '',
                     'current_order_id': '',
                     'contacts': [],
                     'orders_count': 0}
        self.db_user_info.update({'user_id': current_user.id}, user_info, upsert=True)

    def remove_user(self, user_id: str) -> None:
        self.db_user_info.remove({'user_id': user_id})

    def get_user_field(self, user_id: str, field: str) -> str | list:
        return self.db_user_info.find({'user_id': user_id})[0].get(field)

    def set_user_field(self, user_id: str, field: str, new_value: str | list) -> None:
        value_to_update = {'$set': {field: new_value}}
        self.db_user_info.update({'user_id': user_id}, value_to_update)


class OrdersManager:

    def __init__(self, db_orders):
        self.db_orders = db_orders

    def create_order(self, user_id: str, user_name: str) -> str:
        new_order = {
            'order_id': self.generate_new_order_id(),
            'message_id': 0,
            'user_id': user_id,
            'user_name': user_name,
            'status': 'new',
            'driver_name': '',
            'drivers_notification_sent': False,
            'drivers_notification_declined_sent': False,
            'user_notification_sent': False,
            TAXI_FROM: '',
            TAXI_FROM_LOCATION: '',
            TAXI_TO: '',
            TAXI_TO_LOCATION: '',
            TAXI_TIME: '',
            TAXI_CONTACT: ''
        }
        self.db_orders.insert(new_order)
        return new_order.get('order_id')

    def generate_new_order_id(self) -> str:
        if self.db_orders.count() == 0:
            return 1
        else:
            all_orders = self.db_orders.find()
            return all_orders[all_orders.count() - 1].get('order_id') + 1

    def set_order_field(self, order_id: str, order_field: str, new_value: str) -> None:
        value_to_update = {"$set": {order_field: new_value}}
        self.db_orders.update({'order_id': order_id}, value_to_update)

    def get_order_info(self, order_id: str) -> dict:
        return self.db_orders.find({'order_id': order_id})[0]

    def get_open_orders(self, user_id: str) -> list:
        return self.db_orders.find({'user_id': user_id, 'status': 'open'})

    def generate_order_message(self, order: dict) -> str:
        return f'[‚Ññ{order.get("order_id")}] {order.get(TAXI_FROM)} -> {order.get(TAXI_TO)} ({order.get(TAXI_TIME)})'

    def decline_order(self, update, context) -> None:
        message = update.effective_message.text_html
        order_id = message.partition(']')[0].replace('[‚Ññ', '')
        # Updating order status
        value_to_update = {"$set": {'status': "declined"}}
        self.db_orders.update({'order_id': int(order_id)}, value_to_update)
        # Message to chat
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            text=f'‚ùå {message} <b>–û–¢–ú–ï–ù–ï–ù</b>',
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True)


class TelegramMenu:

    def __init__(self, user_manager: UserManager, orders_manager: OrdersManager):

        # Map.md Token
        with open('settings.json', 'r') as file:
            file_data = json.load(file)
            self.mapmd_token = file_data.get('mapmd_token')
            file.close()

        self.user_manager = user_manager
        self.orders_manager = orders_manager

        # Main menu buttons
        main_keyboard = [
            [KeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏'),
             KeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã'),
             KeyboardButton(text='–¶–µ–Ω—ã'),
             KeyboardButton(text='–í–æ–ø—Ä–æ—Å / –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')]
        ]
        self.reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True, one_time_keyboard=False)

    def menu_message(self, update, context) -> None:

        user_message = update.message.text.upper()
        user_id = update.effective_chat.id

        current_step = self.user_manager.get_user_field(user_id, 'current_step')

        if user_message == '–ó–ê–ö–ê–ó–ê–¢–¨ –¢–ê–ö–°–ò':
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–û—Ç–∫—É–¥–∞ –ø–æ–µ–¥–µ–º?\n(<b>–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>)',
                                     parse_mode=ParseMode.HTML)
            self.user_manager.set_user_field(user_id, 'current_step', TAXI_FROM)
        elif user_message == '–ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´':
            open_orders = self.orders_manager.get_open_orders(user_id)
            if open_orders.count() == 0:
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text='–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
            else:
                order_keyboard = [
                    [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='decline_order')]
                ]
                reply_markup = InlineKeyboardMarkup(order_keyboard, resize_keyboard=True, one_time_keyboard=False)
                for open_order in open_orders:
                    context.bot.send_message(chat_id=update.effective_chat.id,
                                             text=self.orders_manager.generate_order_message(open_order),
                                             reply_markup=reply_markup)
        elif user_message == '–¶–ï–ù–´':
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='‚ùáÔ∏è –ü–æ —Ä–∞–π–æ–Ω—É - <b>40 –õ–ï–ô</b>\n'
                                          '‚ùáÔ∏è –ú–µ–∂–¥—É —Ä–∞–π–æ–Ω–∞–º–∏ - <b>50 –õ–ï–ô</b>\n'
                                          '‚ùáÔ∏è –ß–µ—Ä–µ–∑ —Ä–∞–π–æ–Ω - <b>60 –õ–ï–ô</b>\n\n'
                                          'üåê –¢–∞—Ä–∏—Ñ –≤–Ω–µ –ö–∏—à–∏–Ω–µ–≤–∞ - <b>5 –õ–ï–ô/–ö–ú</b>\n\n'
                                          'üïì <i>–û–∂–∏–¥–∞–Ω–∏–µ: 5 –º–∏–Ω. –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ - <b>1 –õ–ï–ô/–ú–ò–ù.</b></i>\n\n'
                                          '‚ÄºÔ∏è –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –∏ –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤!\n'
                                          '‚ÄºÔ∏è –°–æ–≤–µ—Ç—É–µ–º —É—Ç–æ—á–Ω—è—Ç—å —Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π!',
                                     parse_mode=ParseMode.HTML)
        elif user_message == '–í–û–ü–†–û–° / –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï':
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
            self.user_manager.set_user_field(user_id, 'current_step', QUESTION)
        elif len(current_step) != 0:
            self.message_handler(user_id, user_message, current_step, update, context)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')

    def location_message(self, update, context) -> None:

        user_id = update.effective_chat.id

        location = update.message.location
        latitude = location.latitude
        longitude = location.longitude
        full_location = f'{longitude},{latitude}'
        address = self.get_address_from_location(latitude, longitude)

        current_step = self.user_manager.get_user_field(user_id, 'current_step')

        if current_step == TAXI_FROM:
            self.taxi_from_handler(user_id, address, full_location, context)
        elif current_step == TAXI_TO:
            self.taxi_to_handler(user_id, address, full_location, update)

    def message_handler(self, user_id: str, user_message: str, current_step: str, update, context) -> None:

        if current_step == QUESTION:
            user_name = self.user_manager.get_user_field(user_id, 'link').replace('https://t.me/', '@')
            question = f'<b>–ü–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {user_name}</b>\n\n' \
                       f'{user_message}'
            # bobtb
            context.bot.send_message(chat_id='360152058',
                                     text=question,
                                     parse_mode=ParseMode.HTML)
        elif current_step == TAXI_FROM:
            self.taxi_from_handler(user_id, user_message, '', context)
        elif current_step == TAXI_TO:
            self.taxi_to_handler(user_id, user_message, '', update)
        elif current_step == TAXI_TIME:
            self.taxi_time_handler(user_id, user_message, context)
        elif current_step == TAXI_CONTACT:
            self.taxi_contact_handler(user_id, user_message, context)

    def taxi_from_handler(self, user_id: str, address: str, full_location: str, context) -> None:

        user_name = self.user_manager.get_user_field(user_id, 'link')
        order_id = self.orders_manager.create_order(user_id, user_name.replace('https://t.me/', ''))

        self.orders_manager.set_order_field(order_id, TAXI_FROM, address)
        self.orders_manager.set_order_field(order_id, TAXI_FROM_LOCATION, full_location)

        self.user_manager.set_user_field(user_id, 'current_order_id', order_id)
        self.user_manager.set_user_field(user_id, 'current_step', TAXI_TO)

        context.bot.send_message(chat_id=user_id,
                                 text='–ö—É–¥–∞ –ø–æ–µ–¥–µ–º?\n(<b>–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>)',
                                 parse_mode=ParseMode.HTML)

    def taxi_to_handler(self, user_id: str, address: str, full_location: str, update) -> None:

        order_id = self.user_manager.get_user_field(user_id, 'current_order_id')

        self.orders_manager.set_order_field(order_id, TAXI_TO, address)
        self.orders_manager.set_order_field(order_id, TAXI_TO_LOCATION, full_location)

        self.user_manager.set_user_field(user_id, 'current_step', TAXI_TIME)

        keyboard = [
            [InlineKeyboardButton('–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', callback_data='time1')],
            [InlineKeyboardButton('15 –º–∏–Ω', callback_data='time2'),
            InlineKeyboardButton('20 –º–∏–Ω', callback_data='time3'),
            InlineKeyboardButton('25 –º–∏–Ω', callback_data='time4')]
        ]
        update.message.reply_text(text='–í–æ —Å–∫–æ–ª—å–∫–æ –í–∞—Å –∑–∞–±—Ä–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π',
                                    reply_markup=InlineKeyboardMarkup(keyboard))
        #context.bot.send_message(chat_id=user_id,
        #                         text='–í–æ —Å–∫–æ–ª—å–∫–æ –í–∞—Å –∑–∞–±—Ä–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π (–ü—Ä–∏–º–µ—Ä: 17:30)',
        #                         reply_markup=InlineKeyboardMarkup(keyboard))

    def taxi_time_handler(self, user_id: str, user_message: str, context) -> None:

        order_id = self.user_manager.get_user_field(user_id, 'current_order_id')

        self.orders_manager.set_order_field(order_id, TAXI_TIME, user_message)
        self.user_manager.set_user_field(user_id, 'current_step', TAXI_CONTACT)

        context.bot.send_message(chat_id=user_id,
                                 text='–ö–∞–∫ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?')

    def taxi_contact_handler(self, user_id: str, user_message: str, context) -> None:

        order_id = self.user_manager.get_user_field(user_id, 'current_order_id')

        self.orders_manager.set_order_field(order_id, TAXI_CONTACT, user_message)

        self.user_manager.set_user_field(user_id, 'current_step', '')
        self.user_manager.set_user_field(user_id, 'current_order_id', '')

        # Updating contacts
        current_contacts = self.user_manager.get_user_field(user_id, 'contacts')
        if user_message not in current_contacts:
            current_contacts.append(user_message)
        self.user_manager.set_user_field(user_id, 'contacts', current_contacts)

        self.orders_manager.set_order_field(order_id, 'status', 'open')

        context.bot.send_message(chat_id=user_id,
                                 text='üîî –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...')

    def get_address_from_location(self, latitude: str, longitude: str) -> str:

        url = f'https://map.md/api/companies/webmap/near?lat={latitude}&lon={longitude}'
        headers = {'Content-Type': 'application/json'}
        request = requests.get(url=url,
                               auth=HTTPBasicAuth(self.mapmd_token, ''),
                               headers=headers)

        if request.status_code == 200:
            request_json = request.json()
            try:
                building = request_json.get('building')
                city = building.get('location').replace('Chi≈üinƒÉu', 'Chisinau')
                street = building.get('street_name')
                number = building.get('number')
                return f'{city}, {street} {number}'
            except:
                return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        else:
            return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'

    def time1(self, update, context) -> None:
        
        query = update.callback_query
        query.answer()

        user_id = update.effective_chat.id
        self.taxi_time_handler(user_id, '–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', context)

    def time2(self, update, context) -> None:

        query = update.callback_query
        query.answer()

        user_id = update.effective_chat.id

        current_time = datetime.now()
        final_time = current_time + timedelta(minutes=15)

        self.taxi_time_handler(user_id, final_time.strftime("%H:%M"), context)

    def time3(self, update, context) -> None:
        
        query = update.callback_query
        query.answer()

        user_id = update.effective_chat.id

        current_time = datetime.now()
        final_time = current_time + timedelta(minutes=20)

        self.taxi_time_handler(user_id, final_time.strftime("%H:%M"), context)
    
    def time4(self, update, context) -> None:
        
        query = update.callback_query
        query.answer()

        user_id = update.effective_chat.id

        current_time = datetime.now()
        final_time = current_time + timedelta(minutes=25)

        self.taxi_time_handler(user_id, final_time.strftime("%H:%M"), context)

class TelegramHandlers:

    def __init__(self, user_manager: UserManager, menu: TelegramMenu):

        # Initializing menu
        self.menu = menu
        self.user_manager = user_manager

    def start(self, update, context) -> None:

        # Creating users
        current_user = update.effective_chat
        self.user_manager.create_user(current_user)

        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f'üëã <b>–ü—Ä–∏–≤–µ—Ç, {current_user.full_name}!</b> üëã\n\n'
                                      f'üöï –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —É–¥–æ–±–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏\n'
                                      f'‚ùì <i>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –º–æ–∂–Ω–æ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–µ</i>\n\n'
                                      f'üì£ –•–æ—á–µ—à—å –±—ã—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π? –°–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏',
                                 reply_markup=self.menu.reply_markup,
                                 parse_mode=ParseMode.HTML)

    def stop(self, update, context) -> None:

        self.user_manager.remove_user(update.effective_chat.id)

        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ß—Ç–æ–±—ã –≤–Ω–æ–≤—å —É–¥–æ–±–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫—Å–∏ - –≤–≤–µ–¥–∏ /start')

    def unknown(self, update, context) -> None:

        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")


if __name__ == '__main__':
    print('Only for import!')
